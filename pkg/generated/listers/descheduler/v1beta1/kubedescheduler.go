/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/openshift/cluster-kube-descheduler-operator/pkg/apis/descheduler/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeDeschedulerLister helps list KubeDeschedulers.
type KubeDeschedulerLister interface {
	// List lists all KubeDeschedulers in the indexer.
	List(selector labels.Selector) (ret []*v1beta1.KubeDescheduler, err error)
	// KubeDeschedulers returns an object that can list and get KubeDeschedulers.
	KubeDeschedulers(namespace string) KubeDeschedulerNamespaceLister
	KubeDeschedulerListerExpansion
}

// kubeDeschedulerLister implements the KubeDeschedulerLister interface.
type kubeDeschedulerLister struct {
	indexer cache.Indexer
}

// NewKubeDeschedulerLister returns a new KubeDeschedulerLister.
func NewKubeDeschedulerLister(indexer cache.Indexer) KubeDeschedulerLister {
	return &kubeDeschedulerLister{indexer: indexer}
}

// List lists all KubeDeschedulers in the indexer.
func (s *kubeDeschedulerLister) List(selector labels.Selector) (ret []*v1beta1.KubeDescheduler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeDescheduler))
	})
	return ret, err
}

// KubeDeschedulers returns an object that can list and get KubeDeschedulers.
func (s *kubeDeschedulerLister) KubeDeschedulers(namespace string) KubeDeschedulerNamespaceLister {
	return kubeDeschedulerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeDeschedulerNamespaceLister helps list and get KubeDeschedulers.
type KubeDeschedulerNamespaceLister interface {
	// List lists all KubeDeschedulers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1beta1.KubeDescheduler, err error)
	// Get retrieves the KubeDescheduler from the indexer for a given namespace and name.
	Get(name string) (*v1beta1.KubeDescheduler, error)
	KubeDeschedulerNamespaceListerExpansion
}

// kubeDeschedulerNamespaceLister implements the KubeDeschedulerNamespaceLister
// interface.
type kubeDeschedulerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeDeschedulers in the indexer for a given namespace.
func (s kubeDeschedulerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KubeDescheduler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KubeDescheduler))
	})
	return ret, err
}

// Get retrieves the KubeDescheduler from the indexer for a given namespace and name.
func (s kubeDeschedulerNamespaceLister) Get(name string) (*v1beta1.KubeDescheduler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kubedescheduler"), name)
	}
	return obj.(*v1beta1.KubeDescheduler), nil
}
